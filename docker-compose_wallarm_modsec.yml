version: "3"

networks:
  xs2a-net:

volumes:
  consent-management-data:

services:
  # xs2a standalone starter
  xs2a-standalone-starter:
    image: adorsys/xs2a-standalone-starter
    build:
      context: xs2a-standalone-starter
      dockerfile: Dockerfile
    restart: on-failure
    environment:
      - JAVA_TOOL_OPTIONS="-Xmx256M"
      - SPRING_PROFILES_ACTIVE=mock-qwac
      - XS2A_CMS_ASPSP_PROFILE_BASEURL=${XS2A_CMS_ASPSP_PROFILE_BASEURL:-http://aspsp-profile:8080/api/v1}
      - XS2A_CMS_CONSENT_SERVICE_BASEURL=${XS2A_CMS_CONSENT_SERVICE_BASEURL:-http://consent-management:8080/api/v1}
    ports:
      - "8080:8080"
    networks:
      - xs2a-net
    depends_on:
      - aspsp-profile
      - consent-management

  # ASPSP-PROFILE
  aspsp-profile:
    image: adorsys/xs2a-aspsp-profile
    build:
      context: aspsp-profile/aspsp-profile-server
      dockerfile: Dockerfile
    restart: on-failure
    environment:
      - JAVA_TOOL_OPTIONS="-Xmx256M"
      - SPRING_PROFILES_ACTIVE=debug_mode
    ports:
      - "48080:8080"
    networks:
      - xs2a-net

  # CONSENT-MANAGEMENT-SYSTEM
  consent-management:
    image: adorsys/xs2a-consent-management
    build:
      context: consent-management/cms-standalone-service
      dockerfile: Dockerfile
    restart: on-failure
    ports:
      - "38080:8080"
    networks:
      - xs2a-net
    environment:
      - JAVA_TOOL_OPTIONS="-Xmx512M"
      - SPRING_DATASOURCE_URL=jdbc:postgresql://consent-management-postgres/consent
      - SPRING_DATASOURCE_USERNAME=cms
      - SPRING_DATASOURCE_PASSWORD=cms
      - XS2A_CMS_ASPSP_PROFILE_BASEURL=${XS2A_CMS_ASPSP_PROFILE_BASEURL:-http://aspsp-profile:8080/api/v1}
      - SERVER_KEY=my_secret_for_cms
      - SPRING_JPA_PROPERTIES_HIBERNATE_DEFAULT_SCHEMA=consent
      - SPRING_LIQUIBASE_ENABLED=true
      - SPRING_LIQUIBASE_URL=jdbc:postgresql://consent-management-postgres/consent?currentSchema=consent
      - SPRING_LIQUIBASE_USER=cms
      - SPRING_LIQUIBASE_PASSWORD=cms
    depends_on:
      - consent-management-postgres

  consent-management-postgres:
    image: centos/postgresql-95-centos7
    volumes:
      - consent-management-data:/var/lib/pgsql/data
      - ./consent-management/cms-db-schema/util/pg-create-schema.sh:/usr/share/container-scripts/postgresql/start/zzz-create-schema.sh
    restart: on-failure
    ports:
      - "5432:5432"
    networks:
      - xs2a-net
    environment:
      - POSTGRESQL_ADMIN_PASSWORD=postgres
      - POSTGRESQL_DATABASE=consent
      - POSTGRESQL_USER=cms
      - POSTGRESQL_PASSWORD=cms
    expose:
      - 5432

  api-firewall:
    container_name: api-firewall
    image: wallarm/api-firewall:v0.7.4
    restart: on-failure
    environment:
      APIFW_URL: "http://0.0.0.0:8080"
      APIFW_API_SPECS: "/opt/resources/api-firewall/psd2-api.yaml"
      APIFW_SERVER_URL: "http://xs2a-standalone-starter:8080"
      APIFW_SERVER_MAX_CONNS_PER_HOST: "512"
      APIFW_SERVER_READ_TIMEOUT: "10s"
      APIFW_SERVER_WRITE_TIMEOUT: "10s"
      APIFW_SERVER_DIAL_TIMEOUT: "200ms"
      APIFW_REQUEST_VALIDATION: "BLOCK"
      APIFW_RESPONSE_VALIDATION: "BLOCK"
      
      APIFW_MODSEC_CONF_FILES: "/opt/resources/coraza.conf;/opt/resources/crs/crs-setup.conf.example"
      APIFW_MODSEC_RULES_DIR: "/opt/resources/crs/rules/"

    volumes:
      - ./volumes/api-firewall:/opt/resources/api-firewall:ro
      - ./volumes/crs:/opt/resources/crs:ro
      - ./volumes/coraza.conf:/opt/resources/coraza.conf:ro
      
    ports:
      - "8081:8080"
    networks:
      - xs2a-net
    stop_grace_period: 1s